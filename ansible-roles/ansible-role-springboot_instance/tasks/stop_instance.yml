---

# Tasks to attempt to stop the Springboot instance
# Tries to first stop the server via an existing service.
# If that fails, it will check if the application folder
# exists and try to stop the server from command line.

# Attempt to stop the existing service

- name: "Orderly attempt to stop systemd unit {{ sbi_servicename }}"
  when:
    - sbi_become
  block:
    # do not confuse this with the service status !
    - name: "Check service-file (systemd unit-file) status"
      ansible.builtin.systemd:
        name: "{{ sbi_service_name }}"
      become: "{{ sbi_become }}"
      register: sbi_systemd_result

    # Stop1: First attempt to stop the Springboot instance
    - name: "Stop Springoot instance"
      ansible.builtin.systemd:
        name: "{{ sbi_service_name }}"
        state: stopped
      become: "{{ sbi_become }}"
      register: sbi_service_stop
      when:
        - sbi_systemd_result is defined and sbi_systemd_result.status is defined
        - sbi_systemd_result.status.UnitFileState is defined and sbi_systemd_result.status.UnitFileState == 'enabled'

    - name: "Output of stop attempt using systemd"
      ansible.builtin.debug:
        var: sbi_service_stop

# Stop2 (last chance): Try to stop any Java process with the AppName
- name: "Stop the Springboot Server (via process identification), using pkill command for any java process started with our app_name as argument"
  ansible.builtin.shell: |
    pkill -f '^([^/]*/)*java\s+(.*?\s+)?-DAPP_NAME={{ sbi_appname | regex_escape() }}(\s+.*)?$'
  become: "{{ sbi_become }}"
  register: sbi_pkill_output_cmd
  failed_when: sbi_pkill_output_cmd.stderr_lines|length > 0
  changed_when: sbi_pkill_output_cmd.rc == 0
